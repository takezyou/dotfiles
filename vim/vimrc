"
" takezyou vimrc
"

" dein.vim
if &compatible
  set nocompatible 
endif

let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif
    execute 'set runtimepath+=' . s:dein_repo_dir
endif

if dein#load_state(s:dein_dir)
    call dein#begin(s:dein_dir)

    " .toml file
    let s:rc_dir = expand('~/.vim')
    if !isdirectory(s:rc_dir)
    	call mkdir(s:rc_dir, 'p')
    endif
    let s:toml = s:rc_dir . '/dein.toml'
    let s:lazy_toml = s:rc_dir . '/dein_lazy.toml'

    " read toml and cache
    call dein#load_toml(s:toml, {'lazy': 0})
    call dein#load_toml(s:lazy_toml, {'lazy': 1})

    " end settings
    call dein#end()
    call dein#save_state()
endif

if dein#check_install()
    call dein#install()
endif

let s:removed_plugins = dein#check_clean()
if len(s:removed_plugins) > 0
	call map(s:removed_plugins, "delete(v:val, 'rf')")
	call dein#recache_runtimepath()
endif

"
" general settings
"

" vimrcでマルチバイト文字を使用しているため設定
scriptencoding utf-8

" ミュート
set belloff=all

" 文字コード
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac

" Leaderキーをスペースに設定
let g:mapleader = "\<Space>"

" シンタックスを有効にする
syntax enable

" カラースキームを使う
colorscheme tender

" https://vim-jp.org/vimdoc-ja/filetype.html#:filetype-plugin-on
" https://vim-jp.org/vimdoc-ja/filetype.html#:filetype-indent-on
" ファイル形式別プラグインとインデントを有効にする
filetype plugin indent on

" バックスペースとCtrl+hで削除を有効にする
set backspace=2

" 改行時自動インデント
set smartindent
set autoindent

" 自動インデントの空白の数
set shiftwidth=4

" 行番号を表示
set number

" https://vim-jp.org/vimdoc-ja/options.html#'tabstop'
" タブでも常に空白を挿入
set tabstop=4

" インクリメントサーチを有効にする
set incsearch

" https://vim-jp.org/vimdoc-ja/options.html#'ignorecase'
" 検索時大文字小文字を区別しない
" set ignorecase

" ハイライトサーチを有効にする
set hlsearch

" undoできる最大数
set undolevels=1000

" mac os のクリップボードを共有
set clipboard+=unnamed

" カーソルが常に中央に来るようにする
set scrolloff=100

" マクロで効果発揮
set lazyredraw
set ttyfast

" 一行が長いファイルをsyntaxを制御することで軽くする
set synmaxcol=256

" カーソルラインを表示する
"set cursorline

" 自動でファイルの更新を反映
set autoread

" https://vim-jp.org/vimdoc-ja/options.html#'wildmode'
" wildmenuを有効にする
set wildmenu

" grepした結果をquickfixに表示する
augroup grepwindow
	autocmd!
	au QuickFixCmdPost *grep* cwindow
augroup END

" カーソルラインの位置を保存する
augroup cursorlineRestore
	autocmd!
	autocmd BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\   exe "normal! g'\"" |
				\ endif
augroup END

" undoの保存先
if has('persistent_undo')
	let undo_path = expand('~/.vim/undo')
	exe 'set undodir=' .. undo_path
	set undofile
endif

" 矩形選択時に文字の無いところまで選択範囲を広げる
set virtualedit=block

" ヘルプの言語を日本語優先にする
set helplang=ja

"
set autowrite

"set ambiwidth=double

" swapファイルを作成しない
set noswapfile

" タブを常に表示
set showtabline=2

"
" key mappings
"

" ファイル保存と終了
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :qa!<CR>
nnoremap <Leader>wq :wqa!<CR>

" 検索
nnoremap <C-G><C-G> :Ggrep <C-R><C-W><CR><CR>

" 置換
nnoremap <Leader>re :%s;\<<C-R><C-W>\>;g<Left><Left>;

" visualで選択したテキストを置換する
vnoremap <Leader>re y:%s;<C-r>=substitute(@", "<C-v><NL>", "\\\\n", "g")<CR>;;g<Left><Left>

" ハイライトを削除する
nnoremap <Esc><Esc> :nohlsearch<CR>

" vimrcを開く
nnoremap <Leader>. :new ~/.vimrc<CR>
nnoremap <Leader>s :source ~/.vimrc<CR>

" 行先頭と行末
noremap H ^
noremap L $

" タブ切り替え
" nnoremap <C-l> gt
" nnoremap <C-h> gT

" ターミナルを垂直で開く
nnoremap <C-s>v :vert term ++close<CR>

" ターミナルを水平で開く
nnoremap <C-s> :bo term ++close ++rows=15<CR>

" ターミナルを新しいタブページで開く
nnoremap <C-s>t :tab term ++close<CR>

" ターミナルを新しいタブページで開く
nnoremap <C-s>g :tab term ++close grv<CR>

" ターミナルノーマルモード
"tnoremap <C-w>n <C-w>N

" ターミナルでウィンドウ移動
" tnoremap <silent> <C-h> <C-w>:tabprevious<CR>
" tnoremap <silent> <C-l> <C-w>:tabnext<CR>

" ウィンドウリサイズ開始
tnoremap <C-w><C-e> <C-w>:WinResizerStartResize<CR>

" Ctrl-hを有効化
" tnoremap <C-h> <Del>

" 単語削除
tnoremap <C-g> <C-w>.

" 上下の空白に移動
" nnoremap <C-j> }
" nnoremap <C-k> {

" ウィンド移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" バッファ一覧
nnoremap gb :Buffers<CR>

" コマンドラインで単語移動
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>

"
" insert mode: Emacs like = terminal like
" 

" 文字単位移動
inoremap <silent> <C-b> <Left>
inoremap <silent> <C-f> <Right>

" 行頭に移動
inoremap <silent> <C-a> <Home>

" 行末に移動
inoremap <silent> <C-e> <End>

"
" vim plugins
"

" ligthline
set laststatus=2
if !has('gui_running')
	set t_Co=258
endif

" vim-autosave:
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1

" NERDTree
" nnoremap <silent> <C-e> :NERDTreeToggle<CR>
nnoremap <leader>n  :NERDTreeFocus<CR>

" winresizer
let g:winresizer_start_key = '<C-a>'

" preview-markdown
let g:preview_markdown_vertical = 1
let g:preview_markdown_auto_update = 1

" vim-gitgutter
" set updatetime=100

" fzf
nnoremap <C-P> :Files<CR>

" ファイル一覧を出すときにプレビュー表示 遅かったのでコメントアウト
"command! -bang -nargs=? -complete=dir Files
"   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'ag --hidden --ignore .git -g ""'}), <bang>0)

" ripgrepで検索中、?を押すとプレビュー
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" asyncomplete
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 1
let g:asyncomplete_popup_delay = 200

" lsp
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_text_edit_enabled = 1

